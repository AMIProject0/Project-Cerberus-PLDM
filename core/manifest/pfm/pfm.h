// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef PFM_H_
#define PFM_H_

#include <stdint.h>
#include <stddef.h>
#include "status/rot_status.h"
#include "crypto/hash.h"
#include "crypto/rsa.h"
#include "manifest/manifest.h"


/**
 * The version information for a single firmware version.
 */
struct pfm_firmware_version {
	const char *fw_version_id;						/**< Version identifier for the firmware. */
	uint32_t version_addr;							/**< The flash address containing the version identifier. */
	uint8_t blank_byte;								/**< The value to be used with this version for blank checking. */
};

/**
 * A list of firmware versions.
 */
struct pfm_firmware_versions {
	const struct pfm_firmware_version *versions;	/**< A list of version identifiers. */
	size_t count;									/**< The number of items in the list. */
};

/**
 * A list of read/write flash regions.
 */
struct pfm_read_write_regions {
	const struct flash_region *regions;				/**< The list of read/write regions. */
	size_t count;									/**< The number of regions defined. */
};

/**
 * Defines a complete firmware image that is signed.
 */
struct pfm_image_signature {
	const struct flash_region *regions;				/**< The flash regions that make up the signed image. */
	size_t count;									/**< The number of regions in the image. */
	struct rsa_public_key key;						/**< The RSA key used to sign the image. */
	uint8_t signature[RSA_MAX_KEY_LENGTH];			/**< The image signature. */
	size_t sig_length;								/**< The length of the image signature. */
	uint8_t always_validate;						/**< Flag indicating if this image should be validated
														on every system boot. */
};

/**
 * A list of firmware images.
 */
struct pfm_image_list {
	const struct pfm_image_signature *images;		/**< The list of images. */
	size_t count;									/**< The number of images in the list. */
};

/**
 * The API for interfacing with the Platform Firmware Manifest for a single component.
 */
struct pfm {
	struct manifest base;							/**< Manifest interface */

	/**
	 * Get the list of supported firmware versions advertised in the PFM.
	 *
	 * @param pfm The PFM to query.
	 * @param fw A structure to be updated with the list supported firmware versions.
	 *
	 * @return 0 if the version list was updated successfully or an error code.
	 */
	int (*get_supported_versions) (struct pfm *pfm, struct pfm_firmware_versions *fw);

	/**
	 * Free a list of firmware versions.
	 *
	 * @param pfm The PFM instance that provided the list.
	 * @param fw The supported version list to free.
	 */
	void (*free_fw_versions) (struct pfm *pfm, struct pfm_firmware_versions *fw);

	/**
	 * Get the list of all read/write regions defined for a specific version of firmware.
	 *
	 * @param pfm The PFM to query.
	 * @param version The firmware version to query.
	 * @param writable A structure to be updated with the list of read/write flash regions.
	 *
	 * @return 0 if the region list was updated successfully or an error code.
	 */
	int (*get_read_write_regions) (struct pfm *pfm, const char *version,
		struct pfm_read_write_regions *writable);

	/**
	 * Free a list of read/write regions.
	 *
	 * @param pfm THe PFM instance that provided the list.
	 * @param writable The read/write regions list to free.
	 */
	void (*free_read_write_regions) (struct pfm *pfm, struct pfm_read_write_regions *writable);

	/**
	 * Get the list of all signed firmware components for a specific version of firmware.
	 *
	 * @param pfm The PFM to query.
	 * @param version The firmware version to query.
	 * @param img_list A structure to be updated with the list of signed components.
	 *
	 * @return 0 if the image list was updated successfully or an error code.
	 */
	int (*get_firmware_images) (struct pfm *pfm, const char *version,
		struct pfm_image_list *img_list);

	/**
	 * Free a list of firmware images.
	 *
	 * @param pfm The PFM instance that provided the list.
	 * @param img_list The list of images to free.
	 */
	void (*free_firmware_images) (struct pfm *pfm, struct pfm_image_list *img_list);
};


#define	PFM_ERROR(code)		ROT_ERROR (ROT_MODULE_PFM, code)

/**
 * Error codes that can be generated by a PFM.
 */
enum {
	PFM_INVALID_ARGUMENT = PFM_ERROR (0x00),			/**< Input parameter is null or not valid. */
	PFM_NO_MEMORY = PFM_ERROR (0x01),					/**< Memory allocation failed. */
	PFM_GET_VERSIONS_FAILED = PFM_ERROR (0x02),			/**< The supported firmware version list was not generated. */
	PFM_GET_READ_WRITE_FAILED = PFM_ERROR (0x03),		/**< The list of read/write regions was not generated. */
	PFM_GET_FW_IMAGES_FAILED = PFM_ERROR (0x04),		/**< The list of signed firmware was not generated. */
	PFM_UNSUPPORTED_VERSION = PFM_ERROR (0x05),			/**< The firmware version is not supported by the PFM. */
	PFM_UNKNOWN_KEY_ID = PFM_ERROR (0x06),				/**< A firmware image is signed with a key not in the PFM. */
};


#endif /* PFM_H_ */
