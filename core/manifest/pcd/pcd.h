// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef PCD_H_
#define PCD_H_

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include "status/rot_status.h"
#include "cmd_interface/device_manager.h"
#include "manifest/manifest.h"


/**
 * I2C interface modes
 */
enum {
	PCD_I2C_MULTIMASTER = 0,
	PCD_I2C_MASTER_SLAVE,
	NUM_PCD_I2C_MODES
};

/**
 * Container for a RoT info.
 */
struct pcd_rot_info {
	bool is_pa_rot;							/**< Flag indicating if RoT is a PA-RoT */
	uint8_t i2c_slave_addr;					/**< I2C slave address */
	uint8_t bmc_i2c_addr;					/**< BMC I2C address */
};

/**
 * Container for an RoT port info.
 */
struct pcd_port_info {
	uint32_t spi_freq;						/**< Port SPI frequency */
};

/**
 * The API for interfacing with a PCD file.
 */
struct pcd {
	struct manifest base;					/**< Manifest interface */

	/**
	 * Get a list of device info structs for all Cerberus components.
	 *
	 * @param pcd The PCD to query.
	 * @param devices Device info list for all components on platform.  This will be
	 * dynamically allocated and must be freed by the caller.  This will be null on error.
	 * @param num_devices Number of components on platform.
	 *
	 * @return 0 if the devices info list was retrieved successfully or an error code.
	 */
	int (*get_devices_info) (struct pcd *pcd, struct device_manager_info **devices,
		size_t *num_devices);

	/**
	 * Get RoT info.
	 *
	 * @param pcd The PCD to query.
	 * @param info Container with RoT info.
	 *
	 * @return 0 if the RoT info was retrieved successfully or an error code.
	 */
	int (*get_rot_info) (struct pcd *pcd, struct pcd_rot_info *info);

	/**
	 * Get RoT port info.
	 *
	 * @param pcd The PCD to query.
	 * @param port_id ID of requested port.
	 * @param info Info for requested port.
	 *
	 * @return 0 if the port info was retrieved successfully or an error code.
	 */
	int (*get_port_info) (struct pcd *pcd, uint8_t port_id, struct pcd_port_info *info);
};


#define	PCD_ERROR(code)		ROT_ERROR (ROT_MODULE_PCD, code)

/**
 * Error codes that can be generated by a PCD.
 */
enum {
	PCD_INVALID_ARGUMENT = PCD_ERROR (0x00),			/**< Input parameter is null or not valid. */
	PCD_NO_MEMORY = PCD_ERROR (0x01),					/**< Memory allocation failed. */
	PCD_BUF_TOO_SMALL = PCD_ERROR (0x02),				/**< The buffer provided is too small for requested contents. */
	PCD_UNKNOWN_COMPONENT = PCD_ERROR (0x03),			/**< The component identifier is not present in the PCD. */
	PCD_INVALID_SEG_LEN = PCD_ERROR (0x04),				/**< Segment in PCD has invalid length. */
	PCD_INVALID_SEG_HDR_LEN = PCD_ERROR (0x05),			/**< Segment header in PCD has invalid length. */
	PCD_INVALID_PORT = PCD_ERROR (0x06),				/**< Port not found in PCD. */
};


#endif /* PCD_H_ */
