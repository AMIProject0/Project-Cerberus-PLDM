// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef MANIFEST_H_
#define MANIFEST_H_

#include <stdint.h>
#include <stddef.h>
#include "status/rot_status.h"
#include "crypto/hash.h"
#include "common/signature_verification.h"


/**
 * The base API for working with any manifest.
 */
struct manifest {
	/**
	 * Verify if the manifest is valid.
	 *
	 * @param manifest The manifest to validate.
	 * @param hash The hash engine to use for validation.
	 * @param verification Verification instance to use to verify the manifest signature.
	 * @param hash_out Optional output buffer for manifest hash calculated during verification.  Set
	 * to null to not return the manifest hash.
	 * @param hash_length Length of the hash output buffer.
	 *
	 * @return 0 if the manifest is valid or an error code.
	 */
	int (*verify) (struct manifest *manifest, struct hash_engine *hash,
		struct signature_verification *verification, uint8_t *hash_out, size_t hash_length);

	/**
	 * Get the ID of the manifest.
	 *
	 * @param manifest The manifest to query.
	 * @param id The buffer to hold the manifest ID.
	 *
	 * @return 0 if the ID was successfully retrieved or an error code.
	 */
	int (*get_id) (struct manifest *manifest, uint32_t *id);

	/**
	 * Get the string identifier of the platform for the manifest.
	 *
	 * @param manifest The manifest to query.
	 * @param id Output for the platform identifier.  This will be dynamically allocated and must be
	 * freed by the caller.  This will be null on error.
	 *
	 * @return 0 if the ID was retrieved successfully or an error code.
	 */
	int (*get_platform_id) (struct manifest *manifest, char **id);

	/**
	 * Get the SHA-256 hash of the manifest data, not including the signature.
	 *
	 * @param manifest The manifest to query.
	 * @param hash The hash engine to use for generating the hash.
	 * @param hash_out Output buffer for the manifest hash.
	 * @param hash_length Length of the hash output buffer.
	 *
	 * @return 0 if the hash was calculated successfully or an error code.
	 */
	int (*get_hash) (struct manifest *manifest, struct hash_engine *hash, uint8_t *hash_out,
		size_t hash_length);

	/**
	 * Get the signature of the manifest.
	 *
	 * @param manifest The manifest to query.
	 * @param signature Output buffer for the manifest signature.
	 * @param length Length of the signature buffer.
	 *
	 * @return The length of the signature or an error code.
	 */
	int (*get_signature) (struct manifest *manifest, uint8_t *signature, size_t length);
};


#define	MANIFEST_ERROR(code)		ROT_ERROR (ROT_MODULE_MANIFEST, code)

/**
 * Error codes that can be generated by a manifest.
 *
 * Note: Commented error codes have been deprecated.
 */
enum {
	MANIFEST_INVALID_ARGUMENT = MANIFEST_ERROR (0x00),		/**< Input parameter is null or not valid. */
	MANIFEST_NO_MEMORY = MANIFEST_ERROR (0x01),				/**< Memory allocation failed. */
	MANIFEST_VERIFY_FAILED = MANIFEST_ERROR (0x02),			/**< A verify failure unrelated to authentication. */
	MANIFEST_GET_ID_FAILED = MANIFEST_ERROR (0x03),			/**< The ID was not retrieved. */
	MANIFEST_BAD_MAGIC_NUMBER = MANIFEST_ERROR (0x04),		/**< The manifest magic number was not valid. */
	MANIFEST_BAD_LENGTH = MANIFEST_ERROR (0x05),			/**< The manifest length is bad. */
	MANIFEST_MALFORMED = MANIFEST_ERROR (0x06),				/**< The manifest is not formatted correctly. */
//	MANIFEST_BAD_RESERVED_BYTE = MANIFEST_ERROR (0x07),		/**< The manifest has data in reserved bytes. */
	MANIFEST_GET_HASH_FAILED = MANIFEST_ERROR (0x08),		/**< The hash could not be calculated. */
	MANIFEST_GET_SIGNATURE_FAILED = MANIFEST_ERROR (0x09),	/**< The signature could not be retrieved. */
	MANIFEST_HASH_BUFFER_TOO_SMALL = MANIFEST_ERROR (0x0a),	/**< A buffer for hash output was too small. */
	MANIFEST_SIG_BUFFER_TOO_SMALL = MANIFEST_ERROR (0x0b),	/**< A buffer for signature output was too small. */
	MANIFEST_STORAGE_NOT_ALIGNED = MANIFEST_ERROR (0x0c),	/**< The manifest storage is not aligned correctly. */
};


#endif /* MANIFEST_H_ */
