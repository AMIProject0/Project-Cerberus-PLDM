// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef CMD_DEVICE_H_
#define CMD_DEVICE_H_

#include <stdint.h>
#include <stddef.h>
#include "status/rot_status.h"


/**
 * A hardware-independent API to handle operations that require device-specific workflows.
 */
struct cmd_device {
	/**
	 * Retrieve the device unique chip identifier.
	 *
	 * @param device The device command handler.
	 * @param buffer The output buffer to store the chip ID.
	 * @param buf_len The size of the output buffer.
	 *
	 * @return 0 The length of the chip ID or an error code.  Use ROT_IS_ERROR to check the return
	 * value.
	 */
	int (*get_uuid) (struct cmd_device *device, uint8_t *buffer, size_t buf_len);

	/**
	 * Reset the device.
	 *
	 * @param device The device command handler.
	 *
	 * @return A error code if the device could not be reset.  If the device is reset, this will not
	 * return.
	 */
	int (*reset) (struct cmd_device *device);
};


#define	CMD_DEVICE_ERROR(code)		ROT_ERROR (ROT_MODULE_CMD_DEVICE, code)


/**
 * Error codes that can be generated by a device command handler.
 */
enum {
	CMD_DEVICE_INVALID_ARGUMENT = CMD_DEVICE_ERROR (0x00),			/**< Input parameter is null or not valid. */
	CMD_DEVICE_NO_MEMORY = CMD_DEVICE_ERROR (0x01),					/**< Memory allocation failed. */
	CMD_DEVICE_UUID_BUFFER_TOO_SMALL = CMD_DEVICE_ERROR (0x02),		/**< A buffer for the uuid output data was too small. */
	CMD_DEVICE_RESET_FAILED = CMD_DEVICE_ERROR (0x03),				/**< Failed to trigger a device reset. */
};


#endif /* CMD_DEVICE_H_ */
