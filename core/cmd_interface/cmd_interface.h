// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef CMD_INTERFACE_H_
#define CMD_INTERFACE_H_

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include "status/rot_status.h"
#include "cerberus_protocol.h"


/**
 * Escape sequence to intitiate transaction with slave device instead of responding to system.
 */
#define CMD_ERROR_MESSAGE_ESCAPE_SEQ 			0xDDFF


/**
 * Container for request data.
 */
struct cmd_interface_request {
	/** The raw request data buffer.  This contains the request to process and will be updated with
	 * any response data. */
	uint8_t data[MCTP_PROTOCOL_MAX_MESSAGE_BODY];
	size_t length;					/**< Length of the request/response data. */
	size_t max_response;			/**< Maximum length allowed for a response. */
	uint8_t source_eid;				/**< Endpoint ID that generated the request. */
	uint8_t target_eid;				/**< Endpoint ID that should process the request. */
	bool new_request;				/**< Flag indicating if the data buffer contains a new request
										or a response.  This is set upon request processing and is
										only valid if processing is successful and length is not
										zero. */
	bool crypto_timeout;			/**< Flag indicating if the request required cryptographic
										operations and should be granted a longer timeout.  This is
										set for every request, even when there is an error. */
	int channel_id;					/**< Channel on which the request is received. */
};

/**
 * A list of firmware versions.
 */
struct cmd_interface_fw_version {
	size_t count;					/**< The number of firmware identifiers. */
	const char **id;				/**< The list of firmware identifiers. */
};

/**
 * A list of device IDs.
 */
struct cmd_interface_device_id {
	uint16_t vendor_id;				/**< Vendor ID */
	uint16_t device_id;				/**< Device ID */
	uint16_t subsystem_vid;			/**< Subsystem vendor ID */
	uint16_t subsystem_id;			/**< Subsystem ID */
};


/**
 * Command interface for processing received requests.  This is just a common base type and should
 * not be instantiated directly.
 */
struct cmd_interface {
	/**
	 * Process a received request.
	 *
	 * @param intf The command interface that will process the request.
	 * @param request The request data to process.  This will be updated to contain a response, if
	 * necessary.
	 *
	 * @return 0 if the request was successfully processed or an error code.
	 */
	int (*process_request) (struct cmd_interface *intf, struct cmd_interface_request *request);

	/**
	 * Construct request.
	 *
	 * @param intf The command interface that will construct the request.
	 * @param command_id Command ID of request to generate.
	 * @param request_params Parameters to use when generating request.
	 * @param buf The buffer containing the generated request.
	 * @param buf_len Maximum size of buffer.
	 *
	 * @return Length of the generated packet if the request was successfully constructed or an
	 * error code.
	 */
	int (*issue_request) (struct cmd_interface *intf, uint8_t command_id, void *request_params,
		uint8_t *buf, int buf_len);
};


/* Internal functions for use by derived types. */
int cmd_interface_process_request (struct cmd_interface *intf,
	struct cmd_interface_request *request, uint8_t *command_id, uint8_t *command_set);


#define	CMD_HANDLER_ERROR(code)		ROT_ERROR (ROT_MODULE_CMD_HANDLER, code)

/**
 * Error codes that can be generated by the command handler.
 *
 * Note: Commented error codes have been deprecated.
 */
enum {
	CMD_HANDLER_INVALID_ARGUMENT = CMD_HANDLER_ERROR (0x00),		/**< Input parameter is null or not valid. */
	CMD_HANDLER_NO_MEMORY = CMD_HANDLER_ERROR (0x01),				/**< Memory allocation failed. */
	CMD_HANDLER_PROCESS_FAILED = CMD_HANDLER_ERROR (0x02),			/**< A general error while processing the request. */
	CMD_HANDLER_PAYLOAD_TOO_SHORT = CMD_HANDLER_ERROR (0x03),		/**< The request does not contain the minimum amount of data. */
	CMD_HANDLER_BAD_LENGTH = CMD_HANDLER_ERROR (0x04),				/**< The payload length is wrong for the request. */
	CMD_HANDLER_OUT_OF_RANGE = CMD_HANDLER_ERROR (0x05),			/**< A request argument is not within the valid range. */
	CMD_HANDLER_UNKNOWN_COMMAND = CMD_HANDLER_ERROR (0x06),			/**< A command does not represent a known request. */
	//CMD_HANDLER_UNSUPPORTED_EID = CMD_HANDLER_ERROR (0x07),		/**< The request was sent to an unsupported endpoint. */
	CMD_HANDLER_UNSUPPORTED_INDEX = CMD_HANDLER_ERROR (0x08),		/**< Request for information with an unsupported index was received. */
	CMD_HANDLER_UNSUPPORTED_LEN = CMD_HANDLER_ERROR (0x09),			/**< Request for information with an unsupported length was received. */
	CMD_HANDLER_INVALID_DEVICE_MODE = CMD_HANDLER_ERROR (0x0A),		/**< Invalid device mode. */
	CMD_HANDLER_BUF_TOO_SMALL = CMD_HANDLER_ERROR (0x0B),			/**< Provided buffer too small for output. */
	CMD_HANDLER_UNSUPPORTED_COMMAND = CMD_HANDLER_ERROR (0x0C),		/**< The command is valid but is not supported by the device. */
	CMD_HANDLER_UNSUPPORTED_MSG = CMD_HANDLER_ERROR (0x0D),			/**< Message type not supported. */
	CMD_HANDLER_UNSUPPORTED_CHANNEL = CMD_HANDLER_ERROR (0x0E),		/**< The command is received on a channel not supported by the device. */
	CMD_HANDLER_UNSUPPORTED_OPERATION = CMD_HANDLER_ERROR (0x0F),	/**< The requested operation is not supported. */
	CMD_HANDLER_RESPONSE_TOO_SMALL = CMD_HANDLER_ERROR (0x10),		/**< The maximum allowed response is too small for the output. */
};


#endif /* CMD_INTERFACE_H_ */
