// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef SPI_FLASH_SFDP_H_
#define SPI_FLASH_SFDP_H_

#include <stdint.h>
#include "status/rot_status.h"
#include "flash_master.h"


/**
 * SFDP parameter header format.
 */
struct spi_flash_sfdp_parameter_header {
	uint8_t id_lsb;					/**< LSB of the parameter identifier. */
	uint8_t minor_revision;			/**< Minor revision of the parameter table. */
	uint8_t major_revision;			/**< Major revision of the parameter table. */
	uint8_t length;					/**< Length of the parameter table, in dwords. */
	uint8_t table_pointer[3];		/**< Address of the parameter table. */
	uint8_t id_msb;					/**< MSB of the parameter identifier. */
} __attribute__((__packed__));

/**
 * SFDP header format.
 */
struct spi_flash_sfdp_header {
	uint32_t signature;									/**< SFDP header signature. */
	uint8_t minor_revision;								/**< SFDP minor revision. */
	uint8_t major_revision;								/**< SFDP major revision. */
	uint8_t header_count;								/**< The number of parameters headers. */
	uint8_t unused;										/**< Unused.  Must be 0xff. */
	struct spi_flash_sfdp_parameter_header parameter0;	/**< Header for the first parameter table. */
} __attribute__((__packed__));

/**
 * SFDP interface for a single SPI flash.
 */
struct spi_flash_sfdp {
	struct flash_master *flash;					/**< SPI master for the flash device. */
	struct spi_flash_sfdp_header sfdp_header;	/**< The mandatory SFDP header information. */
};


int spi_flash_sfdp_init (struct spi_flash_sfdp *sfdp, struct flash_master *flash);
void spi_flash_sfdp_release (struct spi_flash_sfdp *sfdp);


/**
 * JEDEC SFDP basic parameter table.
 */
struct spi_flash_sfdp_basic_table {
	struct spi_flash_sfdp_header *sfdp_header;	/**< The header that describes the table format. */
	void *data;									/**< The SFDP basic parameter table data. */
};

/**
 * Details necessary to execute read commands.
 */
struct spi_flash_sfdp_read_cmd {
	uint8_t opcode;								/**< The opcode to use for the read. */
	uint8_t dummy_bytes;						/**< The number of dummy bytes. */
	uint8_t mode_bytes;							/**< The number of mode bytes. */
};

/**
 * Information read commands supported by the flash device.
 */
struct spi_flash_sfdp_read_commands {
	struct spi_flash_sfdp_read_cmd dual_1_1_2;	/**< Dual output (1-1-2) fast read. */
	struct spi_flash_sfdp_read_cmd dual_1_2_2;	/**< Dual I/O (1-2-2) fast read. */
	struct spi_flash_sfdp_read_cmd dual_2_2_2;	/**< DPI (2-2-2) fast read. */
	struct spi_flash_sfdp_read_cmd quad_1_1_4;	/**< Quad output (1-1-4) fast read. */
	struct spi_flash_sfdp_read_cmd quad_1_4_4;	/**< Quad I/O (1-4-4) fast read. */
	struct spi_flash_sfdp_read_cmd quad_4_4_4;	/**< QPI (4-4-4) fast read. */
};


int spi_flash_sfdp_basic_table_init (struct spi_flash_sfdp_basic_table *table,
	struct spi_flash_sfdp *sfdp);
void spi_flash_sfdp_basic_table_release (struct spi_flash_sfdp_basic_table *table);

int spi_flash_sfdp_get_device_capabilities (struct spi_flash_sfdp_basic_table *table,
	uint32_t *capabilities);
int spi_flash_sfdp_get_device_size (struct spi_flash_sfdp_basic_table *table);
int spi_flash_sfdp_get_read_commands (struct spi_flash_sfdp_basic_table *table,
	struct spi_flash_sfdp_read_commands *read);

void spi_flash_sfdp_dump_basic_table (struct spi_flash_sfdp_basic_table *table);


#define	SPI_FLASH_SFDP_ERROR(code)		ROT_ERROR (ROT_MODULE_SPI_FLASH_SFDP, code)

/**
 * Error codes that can be generated by SFDP parsing.
 */
enum {
	SPI_FLASH_SFDP_INVALID_ARGUMENT = SPI_FLASH_SFDP_ERROR (0),		/**< Input parameter is null or not valid. */
	SPI_FLASH_SFDP_NO_MEMORY = SPI_FLASH_SFDP_ERROR (1),			/**< Memory allocation failed. */
	SPI_FLASH_SFDP_BAD_SIGNATURE = SPI_FLASH_SFDP_ERROR (2),		/**< The SFDP header signature is not correct. */
	SPI_FLASH_SFDP_BAD_HEADER = SPI_FLASH_SFDP_ERROR (3),			/**< SFDP header information is invalid. */
	SPI_FLASH_SFDP_LARGE_DEVICE = SPI_FLASH_SFDP_ERROR (4),			/**< The device is too large to correctly report size. */
};


#endif /* SPI_FLASH_SFDP_H_ */
