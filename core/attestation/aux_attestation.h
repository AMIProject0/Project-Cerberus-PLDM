// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef AUX_ATTESTATION_H_
#define AUX_ATTESTATION_H_

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include "status/rot_status.h"
#include "keystore/keystore.h"
#include "crypto/rsa.h"
#include "crypto/hash.h"
#include "crypto/x509.h"
#include "crypto/rng.h"
#include "common/certificate.h"


/**
 * Handler for providing an auxiliary method of attestation.
 */
struct aux_attestation {
	struct keystore *keystore;		/**< Storage for the attestation private key. */
	struct rsa_engine *rsa;			/**< Interface for RSA operations with the private key. */
	struct der_cert cert;			/**< The certificate for the attestation private key. */
	bool is_static;					/**< Flag indicating if the certificate is in static memory. */
};


int aux_attestation_init (struct aux_attestation *aux, struct keystore *keystore,
	struct rsa_engine *rsa);
void aux_attestation_release (struct aux_attestation *aux);

int aux_attestation_generate_key (struct aux_attestation *aux);
int aux_attestation_erase_key (struct aux_attestation *aux);

int aux_attestation_create_certificate (struct aux_attestation *aux, struct x509_engine *x509,
	struct rng_engine *rng, const uint8_t *ca, size_t ca_length, const uint8_t *ca_key,
	size_t key_length);
int aux_attestation_set_certificate (struct aux_attestation *aux, uint8_t *cert, size_t length);
int aux_attestation_set_static_certificate (struct aux_attestation *aux, const uint8_t *cert,
	size_t length);
const struct der_cert* aux_attestation_get_certificate (struct aux_attestation *aux);

int aux_attestation_unseal (struct aux_attestation *aux, struct hash_engine *hash,
	const uint8_t *seed, size_t seed_length, const uint8_t *hmac, const uint8_t *ciphertext,
	size_t cipher_length, const uint8_t *sealing, const uint8_t *pcr, uint8_t **key,
	size_t *key_length);

int aux_attestation_decrypt (struct aux_attestation *aux, const uint8_t *encrypted,
	size_t len_encrypted, const uint8_t *label, size_t len_label, enum hash_type pad_hash,
	uint8_t *decrypted, size_t len_decrypted);


#define	AUX_ATTESTATION_ERROR(code)		ROT_ERROR (ROT_MODULE_AUX_ATTESTATION, code)

/**
 * Error codes that can be generated by an auxiliary attestation handler.
 */
enum {
	AUX_ATTESTATION_INVALID_ARGUMENT = AUX_ATTESTATION_ERROR (0x00),	/**< Input parameter is null or not valid. */
	AUX_ATTESTATION_NO_MEMORY = AUX_ATTESTATION_ERROR (0x01),			/**< Memory allocation failed. */
	AUX_ATTESTATION_HAS_CERTIFICATE = AUX_ATTESTATION_ERROR (0x02),		/**< A certificate has already been provisioned. */
	AUX_ATTESTATION_PCR_MISMATCH = AUX_ATTESTATION_ERROR (0x03),		/**< The sealing policy doesn't match local PCR0. */
	AUX_ATTESTATION_HMAC_MISMATCH = AUX_ATTESTATION_ERROR (0x04),		/**< The payload failed verification against the HMAC. */
};


#endif /* AUX_ATTESTATION_H_ */
