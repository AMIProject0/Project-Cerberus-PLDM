#ifndef PLDM_FWUP_HANDLER_H_
#define PLDM_FWUP_HANDLER_H_

#include <stdint.h>
#include <stdbool.h>
#include "cmd_interface/cmd_channel.h"
#include "mctp/mctp_interface.h"
#include "cmd_interface_pldm.h"
#include "status/rot_status.h"

enum pldm_fwup_handler_mode {
    PLDM_FWUP_HANDLER_UA_MODE,                                                      /**< Cerberus operating as the Update Agent. */
    PLDM_FWUP_HANDLER_FD_MODE,                                                      /**< Cerberus operating as the Firmware Device. */
    NUM_PLDM_FWUP_HANDLER_MODES                                                     /**< Number of operating modes. */

};

/**
 * A handler for performing a PLDM-based firmware update as definied in DSP0267. 
 * 
 * The handler contains two internal references to functions that will execute an update when Cerberus 
 * is operating as the Update Agent or as the Firmware Device. 
 * 
 * @note For AMI, the firmware update is performed linearly and does not use the event/periodic task handlers. Parallelization is left up to the AMI team
 *          and if used changes will have to be made to the FWUP manager and protocol commands. Also, GetStatus is the only PLDM command 
 *          not utilized during the update process. 
 */
struct pldm_fwup_handler {
    struct cmd_channel *channel;                                                    /**< Command channel for receiving messages. */
    struct mctp_interface *mctp;                                                    /**< MCTP protocol layer. */
    enum pldm_fwup_handler_mode mode;                                               /**< Current operating mode. */
    uint8_t req_buffer[MCTP_BASE_PROTOCOL_MAX_MESSAGE_LEN];                         /**< Buffer to store PLDM request type messages. */
    int timeout_ms;                                                                 /**< The time to wait in miliseconds for receiving a single packet. */

    /**
     * Internal reference to the function that will execute a firmware update when Cerberus is operating as the Update Agent
     * 
     * This function will update the Firmware Device with the component images contained in the FWUP UA manager.
     * 
     * @param handler The firmware update handler.
     * @param inventory_cmds A flag indicating that inventory commands should be issued to the device being updated. 
     * @param fd_eid The endpoint ID of the firmware device to be updated. 
     * @param fd_addr The SMBus address of the firmware device to be updated. 
     * 
     * @return 0 if the update was successful otherwise an error code.
     */
    int (*run_update_ua) (struct pldm_fwup_handler *handler, bool inventory_cmds, uint8_t fd_eid, uint8_t fd_addr);

    /**
     * Internal reference to the function that will execute a firmware update when Cerberus is operating as the Update Agent
     * 
     * @param handler The firmware update handler.
     * @param ua_eid The endpoint ID of the update agent.  
     * @param ua_addr The SMBus address of the update agent. 
     * 
     * @return 0 if the update was successful otherwise an error code.
     */
    int (*start_update_fd) (struct pldm_fwup_handler *handler, uint8_t ua_eid, uint8_t ua_addr);
};


int pldm_fwup_handler_init(struct pldm_fwup_handler *handler, struct cmd_channel *channel, struct mctp_interface *mctp, int timeout_ms);
void pldm_fwup_handler_release(struct pldm_fwup_handler *handler);

int pldm_fwup_handler_set_mode(struct pldm_fwup_handler *handler, enum pldm_fwup_handler_mode mode);

// Internal functions
int pldm_fwup_handler_generate_request(struct cmd_interface *intf, int command, uint8_t *buffer, size_t buf_len);
int pldm_fwup_handler_receive_and_respond_full_mctp_message(struct cmd_channel *channel, struct mctp_interface *mctp, int timeout_ms);
int pldm_fwup_handler_send_and_receive_full_mctp_message(struct pldm_fwup_handler *handler, int command, uint8_t fd_eid, uint8_t fd_addr);


#define	PLDM_FWUP_HANDLER_ERROR(code)                                               ROT_ERROR (ROT_MODULE_PLDM_FWUP_HANDLER, code)

/**
 * Error codes that can be generated by the firmware update handler. 
 */
enum {
    PLDM_FWUP_HANDLER_INVALID_ARGUMENT = PLDM_FWUP_HANDLER_ERROR (0x00),            /**< Input parameter is null or not valid. */
    PLDM_FWUP_HANDLER_INCORRECT_MODE = PLDM_FWUP_HANDLER_ERROR (0x01),              /**< Incorrect mode of operation. */
    PLDM_FWUP_HANDLER_UNKNOWN_REQUEST = PLDM_FWUP_HANDLER_ERROR (0x02),             /**< A command does not represent a known request. */
    PLDM_FWUP_HANDLER_INVALID_STATE_TRANSITION = PLDM_FWUP_HANDLER_ERROR (0x03),    /**< Invalid state based on the sequence of events. */
    PLDM_FWUP_HANDLER_INVALID_CMD_OPERATION = PLDM_FWUP_HANDLER_ERROR (0x04),       /**< Invalid command operation based on sequence of events. */
    PLDM_FWUP_HANDLER_INVALID_UA_MANAGER_STATE = PLDM_FWUP_HANDLER_ERROR (0x05),    /**< Invalid update agent manager state. */
    PLDM_FWUP_HANDLER_INVALID_FD_MANAGER_STATE = PLDM_FWUP_HANDLER_ERROR (0x06),    /**< Invalid firmware device manager state. */
    PLDM_FWUP_HANDLER_COMMAND_NOT_EXPECTED = PLDM_FWUP_HANDLER_ERROR (0x07)         /**< Command received was not expected based on sequence of events. */
};


#endif /* PLDM_FWUP_HANDLER_H_ */
